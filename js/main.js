//ВЫРАЖЕНИЯ ФУНКЦИИ ОБЪЕКТЫ

//ПОЧТИ ВСЕ ЕСТЬ ОБЪЕКТЫ 
//ОБЪЕКТЫ ЭТО НАБОР СВОЙСТВ ИМЯ:ЗНАЧЕНИЕ

//СВОЙСТВОМ МОЖЕТ БЫТЬ ФУНКЦИЯ - ЭТО МЕТОД
// console.log('smth')

//ВЫРАЖЕНИЯ ВСЕГДА ВОЗВРАЩАЮТ ЗНАЧЕНИЯ
// 5
//ВЫРАЖЕНИЯ С ПОБОЧНЫМИ ДЕЙСТВИЯМИ - ЭТО 5 + 
//+ ВЫПОЛНЕНИЕ ДРУГОГО ДЕЙСТВИЯ
// b = 5
// b++

//ПЕРЕМЕННЫЕ ДАЮТ ПОВТОРНЫЙ ДОСТУП К ЗНАЧЕНИЯМ
//PascalCase - типы и классы
//DB_PASSWORD - значения известны до запуска константы
//camelCase - все остальные переменные
//ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ - 3 СПОСОБА LET CONST VAR
//РЕКОМЕНДУЕТСЯ ИСПОЛЬЗОВАТЬ LET CONST

//ПРИМИТИВНЫЕ ТИПЫ И ССЫЛОЧНЫЙ ТИП
//ПРИМИТИВНЫЕ - string, boolean, number, null,
//undefined, symbol

//ССЫЛОЧНЫЙ - object
//переменная будет хранить ссылку - область памяти,
// где хранится объект

// let objectA = {
//     a:10,
//     b:true
// }
// let objectB = objectA

// objectA.b = 20


// console.log(objectA)
// console.log(objectB)

//const a =  object{} - константа а содержит постоянно одну и ту же ссылку, поэтому const, при этом свойства а можно добавлять, изменять, удалять
//delete object.property - удаление свойства объекта

//ГЛОБАЛЬНЫЕ ОБЪЕКТЫ - в веб браузере - window, в node.js - global
//унифицированные глобальный объект - globalThis
//console - свойство(метод) globalThis

//JSON - js object notation, вместо '' - ""
//JSON -> object - JSON.parse()
//object -> JSON - JSON.stringify()

//МУТАЦИЯ ОБЪЕКТА
//ЭТО ИЗМЕНЕНИЕ СВОЙСТВ ОБЪЕКТА, ПОСЛЕ ПРИСВОЕНИЯ СВОЙСТВ ПРИ ИНИЦИАЛИЗАЦИИ
//МОЖНО МУТИРОВАТЬ ОБЪЕКТ КОПИЕЙ ИЗНАЧАЛЬНОЙ ПЕРЕМЕННОЙ, Т.К ПЕРЕМЕННАЯ ХРАНИТ ССЫЛКУ, СООТВЕТСТВЕННО КОПИЯ ПЕРЕМЕННОЙ ХРАНИТ ТУ ЖЕ ССЫЛКУ
//(copy by reference)
//КАК ИЗБЕЖАТЬ МУТАЦИЙ
//ВАРИАНТ 1
//a = объект на основе которого будет создаваться этот новый объект
//const new = Object.assign({}, a) - Object с большой буквы, т.к это и тип и класс
//НО ЕСЛИ У a есть вложенные объекты, то ссылки на них сохраняются

//ВАРИАНТ 2
//const new = { ...a}, ... - это оператор разделения объекта на свойства
//НО ЕСЛИ У a есть вложенные объекты, то ссылки на них сохраняются

//ВАРИАНТ 3
//const new = JSON.parse(JSON.stringify(a))
//НО ЕСЛИ У a есть вложенные объекты, то ссылки на них НЕ сохраняются

//ФУНКЦИИ
//ФУНКЦИЯ МОЖЕТ БЫТЬ:
//ИМЕННОВАННОЙ
//ПРИСВОЕННА ПЕРЕМЕННОЙ
//АНОНИМНОЙ
//АРГУМЕНТОМ ПРИ ВЫЗОВЕ ДРУГОЙ ФУНКЦИИ
//ЗНАЧЕНИЕМ СВОЙСТВА ОБЪЕКТА
//ВНУТРИ Ф-ЦИИ НЕ РЕКОМЕНДУЕТСЯ МУТИРОВАТЬ ВНЕШНИЙ ОБЪЕКТ
//ЛУЧШЕ СОЗДАТЬ КОПИЮ ОБЪЕКТА В Ф-ЦИИ

//КОЛБЭК ФУНКЦИЯ - ФУНКЦИЯ, КОТОРАЯ ВНУТРИ СЕБЯ ВЫЗЫВАЕТ ДРУГУЮ ФУНКЦИЮ 

// function mFn(){
//     console.log('zxc')
// }

// setTimeout(mFn, 5000)

//ТИПЫ ОБЛАСТЕЙ ВИДИМОСТИ: ГЛОБАЛЬНАЯ ОБЛАСТЬ ВИДИМОСТИ, ОБЛАСТЬ ВИДИМОСТИ ФУНКЦИИ, ОБЛАСТЬ ВИДИМОСТИ БЛОКА
//БЛОК - ЭТО ВСЕ ЧТО МЕЖДУ {}: IF ELSE, FOR..

//'use strict' - строгий режим, появится ошибка, если присвоить значение необъявленной переменной

//ФУНКЦИОНАЛЬНЫЕ ВЫРАЖЕНИЯ - ЭТО АНОНИМНЫЕ ФУНКЦИИ, БЕЗ ИМЕНИ

//СТРЕЛОЧНАЯ ФУНКЦИЯ - ФУНКЦИЯ БЕЗ ИМЕНИ И КЛЮЧЕВОГО СЛОВО FUNCTION
// (a, b) => {
//     ...
// }
//СТРЕЛОЧНЫЕ ФУНКЦИИ - ЭТО ВЫРАЖЕНИЯ, ВСЕГДА АНОНИМНЫ 

//ЧТОБЫ ДАТЬ ИМЯ СТРЕЛОЧНОЙ ФУНКЦИИ ИЛИ ФУНКЦИОНАЛЬНОМУ ВЫРАЖЕНИЮ, НУЖНО ПОМЕСТИТЬ ЕГО В ПЕРЕМЕННУЮ
//ПОЭТОМУ РЕКОМЕНДУЕТСЯ ИСПОЛЬЗОВАТЬ СТРЕЛОЧНУЮ ФУНКЦИЮ ИЛИ ФУКНЦИОНАЛЬНОЕ ВЫРАЖЕНИЕ
//Т.К ИХ НЕЛЬЗЯ ИЗМЕНИТЬ В БУДУЩЕМ

//throw new Error('')
//try{}
//catch(error){}

//ИНСТРУКЦИИ И ВЫРАЖЕНИЯ

//ARRAY - МАССИВ - ОБЪЕКТ - СВ-ВА ЭТО ИНДЕКСЫ
//push - добавление в конец, unshift в начало
//pop удаляет и возвращает последний элемент, shift удаляет и возврщает первый элемент

//.foreach() - для каждого элемента выполняется функция в скобках, не меняет изначальный массив
//.map() - возвращает новый массив на основе изначального, применяя для каждого элемента основного массива функцию в скобках

//Деструктуризация объектов - присвоение переменным свойства объекта
//const userProfile = {
//     name: 'ya',
//     age: 20,
//     zxc: 'zxc'
// }
// const {name, age} = userProfile
// const {zxc} = userProfile

//Деструктуризация массивов - элементы массива присваиваются переменным
//const fruits = ['apple', 'banana']
// const [fruitOne, fruitTwo]] = fruits

//ТЕРНАРНЫЙ ОПЕРАТОР - КОНСТРУКЦИЯ С ТЕРНАРНЫМ ОПЕРАТОРОМ - ВЫРАЖЕНИЕ
//УСЛОВИЕ ? ВЫРАЖЕНИЕ 1 : ВЫРАЖЕНИЕ 2

//ЦИКЛЫ
//ТИПЫ ЦИКЛОВ:for, for ... in ..., while, do ... while, for ... of ...
//for in - получаем индексы
//for of - получаем значения - не для object, т.к не итерируемый
//Object.keys
//Object.values

//МОДУЛИ
//МОДУЛИ СТРУКТУРИЗИРУЮТ КОД
//export - экспортирует фукнцию, при export default name - в другом файле при импорте можно указывать другое имя
//import ... from 'module'- импортирует функцию

//МОЖНО СОЗАТЬ МОУДЛИ С РАСШИРЕНИЕМ MJS И ВЫПОЛНЯТЬ ИХ С ПОМОЩЬЮ node module.mjs

//НЕСКОЛЬКО ЭКСПОРТОВ export {res, res1}
//НЕСКОЛЬКО ИМПОРТОВ import{res as zxc, res1} from './module.js'

//class 
//class Comment{
//     constructor(text) {
//         this.text = text
//         this.votesQty = 0
//     }

//     upvote() {
//         this.votesQty += 1
//     }
// }

//ПРОВЕРКА ПРИНАДЛЕЖНОСТИ - instance of

//СТАТИЧЕСКИЕ МЕТОДЫ - МЕТОД ДОСТУПЕН КАК СВОЙСТВО КЛАССА И НЕ НАСЛЕДУЕТСЯ ЭКЗЕМПЛЯРАМИ 

//РАСШИРЕНИЕ КЛАССОВ - НАСЛЕДОВАНИЕ?
//class ... extends Array - Array - родительский класс

//ПРОМИСЫ
// const getData = (url) =>
//     new Promise((resolve, reject) => 
//         fetch(url)
//             .then(response => response.json())
//             .then(json => resolve(json))
//             .catch(error => reject(error))
//     )

// getData('')
//     .then(data => console.log(data))
//     .catch(error => console.log(error.message))

//АСИНХРОННЫЕ ФУНКЦИИ
//Асинхронная функция всегда возвращает промис
// async function asyncFn() {}
// const asyncFn2 = async () => {
//     throw new Error('There was an error');
// }

// asyncFn2()
//     .then(value => console.log(value))
//     .catch(error => console.log(error.message))



// function countAnimals(animals,count){
//   animals = animals.split(",")
//   console.log(animals)
//   for (item in count)
//   {
//     let ex = new RegExp(count[item], "g")
//     for
//   }
//   return arr

// }

// console.log(countAnimals("dog,cat",["dog","cat"]))


const data = {
  "id": "1"
}

console.log(data.json());
